package recursion

// 一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。
/*
假设，计算青蛙跳台阶的方法为f
0阶: f(0)
1阶: f(1)
2阶: f(2-1) + f(2-2)
3阶: f(3-1) + f(3-2) + f(3-3)
n阶: f(n-2) + f(n-2) + ... + f(n-n)
0阶和1阶肯定都只有一种跳法
如果存在n阶台阶，如果青蛙第一次跳上1阶，那后面还有n-1阶，也就还剩f(n-1)种跳法
如果第一次跳上2阶，后面还有n-2阶，也就还剩f(n-2)中跳法
以此类推就有了以下公式
f(n) = f(n-1) + f(n-2) + ... + f(n-n) = f(0) + f(1) + ... + f(n-2) + f(n-1)
由于
f(n-1) = f((n-1)-1) + f((n-1)-2) + ... + f((n-1)-(n-1)) = f(0) + f(1) + ... + f(n-2)
所以
f(n) = 2 * f(n-1)
故使用递归方法即有以下代码
*/
func jumpFloorII(number int) int {
	if number <= 1 {
		return 1
	}
	return 2 * jumpFloorII(number-1)
}
